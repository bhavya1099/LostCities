// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.user.User;
import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.game.card.Deck;
import com.lostcities.lostcities.domain.game.exception.EmptyDeckException;
import com.lostcities.lostcities.domain.game.exception.GameNotStartedException;
import com.lostcities.lostcities.domain.game.exception.IllegalMoveException;
import com.lostcities.lostcities.domain.game.exception.NotPlayersTurnException;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class Game_reRunMoves_14bac3d6ca_Test {

    @Mock
    private Game game;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testReRunMoves_Success() {
        User user = new User();
        user.setId(1L);

        Move move1 = new Move();
        move1.setUser(user);
        Move move2 = new Move();
        move2.setUser(user);

        List<Move> moves = new ArrayList<>();
        moves.add(move1);
        moves.add(move2);

        when(game.getPlayerById(1L)).thenReturn(Optional.of(user));
        doNothing().when(game).runMove(any(Move.class), any(Move.class));

        game.reRunMoves();

        verify(game, times(2)).getPlayerById(1L);
        verify(game, times(2)).runMove(any(Move.class), any(Move.class));
    }

    @Test
    public void testReRunMoves_Failure() {
        User user = new User();
        user.setId(1L);

        Move move1 = new Move();
        move1.setUser(user);
        Move move2 = new Move();
        move2.setUser(user);

        List<Move> moves = new ArrayList<>();
        moves.add(move1);
        moves.add(move2);

        when(game.getPlayerById(1L)).thenReturn(Optional.empty());

        assertThrows(IllegalStateException.class, () -> game.reRunMoves());

        verify(game, times(1)).getPlayerById(1L);
        verify(game, times(0)).runMove(any(Move.class), any(Move.class));
    }
}
