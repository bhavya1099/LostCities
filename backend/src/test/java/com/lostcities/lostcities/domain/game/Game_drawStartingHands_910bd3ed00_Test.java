// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.game.card.Deck;
import com.lostcities.lostcities.domain.game.exception.EmptyDeckException;
import com.lostcities.lostcities.domain.user.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.ArrayList;
import java.util.Optional;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

public class Game_drawStartingHands_910bd3ed00_Test {

    @Mock
    private Deck deck;
    @Mock
    private Player player1;
    @Mock
    private Player player2;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testDrawStartingHands_success() {
        when(deck.draw()).thenReturn(Optional.of(new Card()), Optional.of(new Card()), Optional.of(new Card()),
                Optional.of(new Card()), Optional.of(new Card()), Optional.of(new Card()), Optional.of(new Card()),
                Optional.of(new Card()), Optional.of(new Card()), Optional.of(new Card()));
        drawStartingHands();
        verify(player1, times(5)).addToHand(any(Card.class));
        verify(player2, times(5)).addToHand(any(Card.class));
    }

    @Test
    public void testDrawStartingHands_emptyDeckException() {
        when(deck.draw()).thenReturn(Optional.empty());
        assertThrows(EmptyDeckException.class, this::drawStartingHands);
    }

    private void drawStartingHands() {
        var player1Hand = new ArrayList<Card>();
        var player2Hand = new ArrayList<Card>();

        for(int i = 0; i < Player.HAND_SIZE; i++) {
            player1Hand.add(deck.draw().orElseThrow(EmptyDeckException::new));
            player2Hand.add(deck.draw().orElseThrow(EmptyDeckException::new));
        }

        player1Hand.forEach(card -> player1.addToHand(card));
        player2Hand.forEach(card -> player2.addToHand(card));
    }
}
