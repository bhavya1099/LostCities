// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.game.card.CardStack;
import com.lostcities.lostcities.domain.game.card.Color;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertSame;

@ExtendWith(MockitoExtension.class)
public class GameBoard_getDiscardStack_26c05bfb4e_Test {

    private Map<Color, CardStack> discardStacks;

    @BeforeEach
    public void setUp() {
        discardStacks = new HashMap<>();
    }

    @Test
    public void testGetDiscardStack_WhenColorIsPresent() {
        Color color = Color.RED;
        CardStack cardStack = new CardStack();
        discardStacks.put(color, cardStack);

        CardStack result = getDiscardStack(color);

        assertSame(cardStack, result, "The returned CardStack should be the same as the one in the map");
    }

    @Test
    public void testGetDiscardStack_WhenColorIsNotPresent() {
        Color color = Color.RED;

        CardStack result = getDiscardStack(color);

        assertNotNull(result, "A new CardStack should be created if color is not present in the map");
    }

    protected CardStack getDiscardStack(Color color) {
        discardStacks.putIfAbsent(color, new CardStack());
        return discardStacks.get(color);
    }
}
