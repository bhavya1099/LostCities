// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.game.card.Color;
import com.lostcities.lostcities.domain.game.exception.EmptyDeckException;
import com.lostcities.lostcities.domain.game.exception.EmptyDiscardException;
import com.lostcities.lostcities.domain.user.User;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class Move_execute_9c3d16261a_Test {

    private Move move;
    
    @Mock
    private User player;
    
    @Mock
    private Deck deck;
    
    @Mock
    private GameBoard board;
    
    @Before
    public void setUp() {
        move = new Move();
        move.setPlayer(player);
    }

    @Test
    public void testExecute_withReadyToStart() {
        when(player.isReadyToStart()).thenReturn(false);
        move.setType(Move.Type.ReadyToStart);
        move.execute(deck, board);
        verify(player, times(1)).setReadyToStart(true);
    }

    @Test(expected = IllegalStateException.class)
    public void testExecute_withReadyToStartAndPlayerAlreadyStarted() {
        when(player.isReadyToStart()).thenReturn(true);
        move.setType(Move.Type.ReadyToStart);
        move.execute(deck, board);
    }

    @Test
    public void testExecute_withPlayCard() {
        Card card = new Card(Color.RED, 5);
        move.setType(Move.Type.PlayCard);
        move.setCard(card);
        move.execute(deck, board);
        verify(player).play(card);
    }

    @Test
    public void testExecute_withDiscardCard() {
        Card card = new Card(Color.RED, 5);
        move.setType(Move.Type.DiscardCard);
        move.setCard(card);
        move.execute(deck, board);
        verify(player).removeFromHand(card);
        verify(board).addToDiscard(card);
    }

    @Test
    public void testExecute_withDrawDiscard() {
        Card card = new Card(Color.RED, 5);
        move.setType(Move.Type.DrawDiscard);
        move.setColor(Color.RED);
        when(board.drawFromDiscard(Color.RED)).thenReturn(Optional.of(card));
        move.execute(deck, board);
        verify(player).addToHand(card);
    }

    @Test(expected = EmptyDiscardException.class)
    public void testExecute_withDrawDiscardAndEmptyDiscard() {
        move.setType(Move.Type.DrawDiscard);
        move.setColor(Color.RED);
        when(board.drawFromDiscard(Color.RED)).thenReturn(Optional.empty());
        move.execute(deck, board);
    }

    @Test
    public void testExecute_withDrawDeck() {
        Card card = new Card(Color.RED, 5);
        move.setType(Move.Type.DrawDeck);
        when(deck.draw()).thenReturn(Optional.of(card));
        move.execute(deck, board);
        verify(player).addToHand(card);
    }

    @Test(expected = EmptyDeckException.class)
    public void testExecute_withDrawDeckAndEmptyDeck() {
        move.setType(Move.Type.DrawDeck);
        when(deck.draw()).thenReturn(Optional.empty());
        move.execute(deck, board);
    }

    @Test(expected = IllegalStateException.class)
    public void testExecute_withUnhandledMoveType() {
        move.setType(null);
        move.execute(deck, board);
    }
}
