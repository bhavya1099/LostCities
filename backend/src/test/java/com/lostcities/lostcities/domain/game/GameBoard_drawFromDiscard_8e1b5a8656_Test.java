// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.game.card.CardStack;
import com.lostcities.lostcities.domain.game.card.Color;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

public class GameBoard_drawFromDiscard_8e1b5a8656_Test {
    private GameBoard gameBoard;
    private Map<Color, CardStack> discardPiles;

    @BeforeEach
    public void setup() {
        gameBoard = Mockito.mock(GameBoard.class);
        discardPiles = new HashMap<>();
        for (Color color : Color.values()) {
            discardPiles.put(color, new CardStack());
        }
        when(gameBoard.getDiscardStack(Mockito.any(Color.class))).thenAnswer(i -> discardPiles.get(i.getArgument(0)));
    }

    @Test
    public void testDrawFromDiscard_whenDiscardPileIsEmpty() {
        Optional<Card> result = gameBoard.drawFromDiscard(Color.YELLOW);
        assertFalse(result.isPresent());
    }

    @Test
    public void testDrawFromDiscard_whenDiscardPileIsNotEmpty() {
        Card yellowCard = new Card(Color.YELLOW, 5);
        discardPiles.get(Color.YELLOW).add(yellowCard);

        Optional<Card> result = gameBoard.drawFromDiscard(Color.YELLOW);
        assertTrue(result.isPresent());
        assertEquals(yellowCard, result.get());
    }
}
