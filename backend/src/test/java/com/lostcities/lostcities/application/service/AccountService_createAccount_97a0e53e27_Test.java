// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.application.service;

import com.lostcities.lostcities.application.dto.UserDto;
import com.lostcities.lostcities.domain.user.User;
import com.lostcities.lostcities.persistence.user.UserDao;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.security.crypto.password.PasswordEncoder;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

public class AccountService_createAccount_97a0e53e27_Test {

    @InjectMocks
    private AccountService accountService;

    @Mock
    private UserDao userDao;

    @Mock
    private PasswordEncoder passwordEncoder;

    @BeforeEach
    public void init() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateAccount() {
        UserDto userDto = new UserDto();
        userDto.setUsername("testUser");
        userDto.setPassword("testPassword");
        userDto.setEmail("test@test.com");

        User user = new User(userDto.getUsername());
        user.setEmail(userDto.getEmail());
        user.setPassword(userDto.getPassword());

        when(passwordEncoder.encode(any(String.class))).thenReturn("hashedPassword");
        when(userDao.save(any(User.class))).thenReturn(user);

        UserDto result = accountService.createAccount(userDto);

        assertEquals(userDto.getUsername(), result.getUsername());
        assertEquals(userDto.getEmail(), result.getEmail());
    }

    @Test
    public void testCreateAccountWithEmptyUsername() {
        UserDto userDto = new UserDto();
        userDto.setUsername("");
        userDto.setPassword("testPassword");
        userDto.setEmail("test@test.com");

        User user = new User(userDto.getUsername());
        user.setEmail(userDto.getEmail());
        user.setPassword(userDto.getPassword());

        when(passwordEncoder.encode(any(String.class))).thenReturn("hashedPassword");
        when(userDao.save(any(User.class))).thenReturn(user);

        UserDto result = accountService.createAccount(userDto);

        assertEquals(userDto.getUsername(), result.getUsername());
        assertEquals(userDto.getEmail(), result.getEmail());
    }
}
