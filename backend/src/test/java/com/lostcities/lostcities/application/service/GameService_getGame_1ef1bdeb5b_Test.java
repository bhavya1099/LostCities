// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.application.service;

import com.lostcities.lostcities.application.dto.GameDto;
import com.lostcities.lostcities.domain.game.Game;
import com.lostcities.lostcities.domain.game.GameRepository;
import com.lostcities.lostcities.domain.game.Player;
import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.user.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import java.util.Collections;
import java.util.HashSet;
import java.util.Optional;
import java.util.Set;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class GameService_getGame_1ef1bdeb5b_Test {

    @InjectMocks
    private GameService gameService;

    @Mock
    private GameRepository gameRepository;

    @BeforeEach
    public void init() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetGame() {
        long gameId = 1;
        User user = new User();
        user.setId(100);
        Game game = new Game();
        game.setId(gameId);
        Player player = new Player(user);
        Set<Card> hand = new HashSet<>();
        hand.add(new Card());
        player.setHand(hand);
        game.addPlayer(player);
        when(gameRepository.findById(gameId)).thenReturn(Optional.of(game));

        GameDto result = gameService.getGame(gameId, user);

        verify(gameRepository, times(1)).save(game);
        assertNotNull(result);
        assertEquals(gameId, result.getId());
        assertEquals(hand, result.getHand());
    }

    @Test
    public void testGetGameWithNoPlayer() {
        long gameId = 1;
        User user = new User();
        user.setId(100);
        Game game = new Game();
        game.setId(gameId);
        when(gameRepository.findById(gameId)).thenReturn(Optional.of(game));

        GameDto result = gameService.getGame(gameId, user);

        verify(gameRepository, times(1)).save(game);
        assertNotNull(result);
        assertEquals(gameId, result.getId());
        assertEquals(Collections.emptySet(), result.getHand());
    }
}
