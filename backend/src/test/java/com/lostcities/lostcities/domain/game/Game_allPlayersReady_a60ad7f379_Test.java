// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.user.User;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

public class Game_allPlayersReady_a60ad7f379_Test {
    private User player1;
    private User player2;

    @BeforeEach
    public void setup() {
        player1 = mock(User.class);
        player2 = mock(User.class);
    }

    @Test
    public void testAllPlayersReady_BothPlayersReady() {
        when(player1.isReadyToStart()).thenReturn(true);
        when(player2.isReadyToStart()).thenReturn(true);

        boolean result = allPlayersReady();

        assertTrue(result, "Both players are ready, method should return true");
    }

    @Test
    public void testAllPlayersReady_OnlyOnePlayerReady() {
        when(player1.isReadyToStart()).thenReturn(true);
        when(player2.isReadyToStart()).thenReturn(false);

        boolean result = allPlayersReady();

        assertFalse(result, "Only one player is ready, method should return false");
    }

    @Test
    public void testAllPlayersReady_NoPlayersReady() {
        when(player1.isReadyToStart()).thenReturn(false);
        when(player2.isReadyToStart()).thenReturn(false);

        boolean result = allPlayersReady();

        assertFalse(result, "No players are ready, method should return false");
    }

    @Test
    public void testAllPlayersReady_OnePlayerIsNull() {
        player1 = null;
        when(player2.isReadyToStart()).thenReturn(true);

        boolean result = allPlayersReady();

        assertFalse(result, "One player is null, method should return false");
    }

    private boolean allPlayersReady() {
        return Stream.of(player1, player2)
                .allMatch(p -> p != null && p.isReadyToStart());
    }
}
