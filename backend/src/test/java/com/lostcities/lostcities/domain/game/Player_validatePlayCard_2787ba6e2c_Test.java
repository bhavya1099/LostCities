// Test generated by RoostGPT for test java-unit-test-bhavya using AI Type Open AI and AI Model gpt-4

package com.lostcities.lostcities.domain.game;

import com.lostcities.lostcities.domain.game.card.Card;
import com.lostcities.lostcities.domain.game.card.CardStack;
import com.lostcities.lostcities.domain.game.card.Color;
import com.lostcities.lostcities.domain.game.exception.CardLowerValueException;
import com.lostcities.lostcities.domain.game.exception.CardNotInHandException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

public class Player_validatePlayCard_2787ba6e2c_Test {

    @InjectMocks
    private Player player;

    @Mock
    private CardStack cardStack;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testValidatePlayCard_WhenCardValueIsLower() {
        Card topCard = new Card(Color.RED, 9);
        Card card = new Card(Color.RED, 7);

        when(player.getInPlay(card.getColor())).thenReturn(cardStack);
        when(cardStack.getTop()).thenReturn(Optional.of(topCard));

        assertThrows(CardLowerValueException.class, () -> player.validatePlayCard(card));
    }

    @Test
    public void testValidatePlayCard_WhenCardValueIsEqualOrHigher() {
        Card topCard = new Card(Color.RED, 7);
        Card card = new Card(Color.RED, 7);

        when(player.getInPlay(card.getColor())).thenReturn(cardStack);
        when(cardStack.getTop()).thenReturn(Optional.of(topCard));

        player.validatePlayCard(card);
    }
}
